import math
import os
import subprocess
import sys
import tempfile
import webbrowser
from tkinter import messagebox
from urllib.parse import urlparse

import keyboard
import openai
import psutil
from PIL import ImageGrab
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import create_bot
import logger
import markups
import tts
import speech_recognition as sr

max_tokens = create_bot.max_tokens
text_to_gpt = create_bot.text_to_gpt
output_file = create_bot.output_file
current_path = create_bot.current_path
page_number = create_bot.page_number
pages = create_bot.pages
drives_in = create_bot.drives_in
user_id = create_bot.user_id
names_drives = create_bot.names_drives
bot_version = create_bot.bot_version
gpt_model = create_bot.gpt_model
folders_names = create_bot.folders_names
root_folder = create_bot.root_folder
text_to_speech = create_bot.text_to_speech

name_folder = ''

bot, dp = create_bot.create()

recognizer = sr.Recognizer()


def copy_bot():
    global bot, dp
    bot, dp = create_bot.create()


def show_error_message(message):
    messagebox.showerror("–û—à–∏–±–∫–∞", message)


async def explore_disks(update=False):
    global user_id
    user_id = create_bot.user_id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ drives_in –∏ —Å–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω - –∫–Ω–æ–ø–∫–∏
    drives = psutil.disk_partitions()
    drives_in.clear()

    for drive in drives:
        try:
            drive_usage = psutil.disk_usage(drive.mountpoint)

            if drive_usage.total > 0:
                drives_in.append(InlineKeyboardButton(drive.device, callback_data=drive.device))

        except Exception:
            pass

    drives_markup = InlineKeyboardMarkup(row_width=2).add(*drives_in)

    if update is False:
        create_bot.edit_msg = await bot.send_message(chat_id=user_id, text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüíø –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:',
                                                     reply_markup=drives_markup)

    else:
        await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                    text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüíø –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:',
                                    reply_markup=drives_markup)

    names_drives.clear()

    for name in drives_in:
        names_drives.append(name['callback_data'])


async def description():
    global user_id
    user_id = create_bot.user_id
    await bot.send_message(chat_id=user_id,
                           text=f"*Jarvis-Bot V{bot_version}*\n\n"
                                "_–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:_\n"
                                "üî∏ /message \[—Ç–µ–∫—Å—Ç] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n"
                                "üî∏ /voice \[—Ç–µ–∫—Å—Ç] - –ø—Ä–∏—Å–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º.\n"
                                "üî∏ /audio \[—Ç–µ–∫—Å—Ç] - –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n"
                                "üî∏ /dalle \[—Ç–µ–∫—Å—Ç] - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                                "üî∏ /link \[—Å—Å—ã–ª–∫–∞] - –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
                                "_–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:_\n"
                                "üî∏ /set\_cmd\_path \[–ø—É—Ç—å] - –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ –∫–æ–º–∞–Ω–¥–∞–º.\n"
                                "üî∏ /set\_downloads\_path \[–ø—É—Ç—å] - –∏–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–∞–º.\n"
                                "üî∏ /set\_gpt\_token \[—Ç–æ–∫–µ–Ω] - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω OpenAI.\n\n"
                                "_–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ –±–æ—Ç–∞:_\n"
                                "üî∏ –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é.\n"
                                "üî∏ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.",
                           reply_markup=markups.service_markup, parse_mode="Markdown")


def is_url(text):
    parsed = urlparse(text)
    return parsed.scheme and parsed.netloc


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
# @dp.message_handler()
async def messages(message: types.Message):
    global max_tokens, text_to_gpt, current_path, user_id
    user_id = create_bot.user_id
    if str(message.from_user.id) == str(user_id):
        if message.text == 'ü§ñ –ö–æ–º–∞–Ω–¥—ã Jarvis':
            await bot.send_message(chat_id=user_id, text='üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:',
                                   reply_markup=markups.open_commands())
        elif message.text == '‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞':
            await bot.send_message(chat_id=user_id, text='‚å® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=markups.keyboard_inline)

        elif message.text == 'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫':
            await explore_disks()

        elif message.text == 'üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º':
            await description()

        elif message.text == 'üñ• –ü—Ä–æ–≥—Ä–∞–º–º—ã':
            current_path = os.path.dirname(os.path.abspath(sys.argv[0])) + '\\lnk'
            result = await explorer_func(number='', query_id='0')

            if result is not None and pages >= 1:
                folder, buttons = result
                await bot.send_message(chat_id=user_id, text=f'üñ• –ü—Ä–æ–≥—Ä–∞–º–º—ã:',
                                       reply_markup=buttons)

            else:
                await bot.send_message(chat_id=user_id, text=f'üñ• –í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º.'
                                                             f' –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —è—Ä–ª—ã–∫–∏ –∏–ª–∏ —Å–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã'
                                                             f' –≤ –ø–∞–ø–∫—É lnk –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏:\n'
                                                             f'{current_path}', reply_markup=markups.open_lnk_markup)

        elif is_url(message.text):
            create_bot.console += f'link: {message.text}\n'
            await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=markups.main_inline)
            webbrowser.open(url=message.text)

        else:
            create_bot.edit_msg = await message.answer("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

            response = 'ü§ñ Jarvis:\n'

            max_tokens = int(max_tokens - len(text_to_gpt) * 1.3)

            if max_tokens <= 0:
                text_to_gpt = message.text + '.'
                max_tokens = int(max_tokens - len(text_to_gpt) * 1.3)
                response += '‚ùó –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.\n'

            close_dialog_btn = InlineKeyboardButton('‚úñ –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='close_dialog')
            gpt_markup = InlineKeyboardMarkup(row_width=1).add(close_dialog_btn)

            try:
                create_bot.console += f'ChatGPT: {message.text}.\n'

                completion = openai.ChatCompletion.create(model=gpt_model,
                                                          messages=[{"role": "user", "content": text_to_gpt},
                                                                    {"role": "user", "content": message.text + '.'}])

                response += completion.choices[0].message.content

                text_to_gpt += ('\n' + message.text + '.' + '\n' + response)

                create_bot.edit_msg = await bot.edit_message_text(chat_id=user_id,
                                                                  message_id=create_bot.edit_msg.message_id,
                                                                  text=response, reply_markup=gpt_markup)

                response = ''

            except openai.error.TryAgain as e:
                create_bot.console += f'\n–û—à–∏–±–∫–∞ gpt: {e}\n\n'
                show_error_message(f'\n–û—à–∏–±–∫–∞ gpt: {e}')
                logger.logging_func(e)

                await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                            text='ü´°–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π openai.error
            except Exception as e:
                create_bot.console += f'\n–û—à–∏–±–∫–∞ gpt: {e}\n\n'
                show_error_message(f'\n–û—à–∏–±–∫–∞ gpt: {e}')

                logger.logging_func(e)

                await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                            text='ü´°–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π—Ç–µ –≤ –ö–æ–Ω—Å–æ–ª–∏.')

    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")


async def recognition(lang):
    global output_file, user_id
    user_id = create_bot.user_id

    create_bot.edit_msg = await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                                      text=f'‚è≥ –ò–¥—ë—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.')

    if lang == 'RU-ru':
        lang_sticker = 'üá∑üá∫'
    elif lang == 'UK-uk':
        lang_sticker = 'üá∫üá¶'
    else:
        lang_sticker = 'üá∫üá∏'

    try:
        with sr.AudioFile(output_file) as audio:
            audio_data = recognizer.record(audio)
            text = recognizer.recognize_google(audio_data, language=lang)
            create_bot.console += f'speech to text: {text}\n'

            await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                        text=f'üìù{lang_sticker}–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}.')

    except sr.exceptions.UnknownValueError:
        create_bot.console += '\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'
        show_error_message('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')

        await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                    text=f'ü´°–ü—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.')

    except Exception as e:
        create_bot.console += f'\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n\n'
        show_error_message(f'\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

    os.remove(output_file)


# –ü—Ä–æ–≤–æ–¥–Ω–∏–∫: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –ø—É—Ç–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Inline –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
async def explorer_func(number, page=1, items_per_page=20, query_id=''):
    global current_path, name_folder, page_number, pages, user_id
    user_id = create_bot.user_id

    page_number = page

    if number == '':  # –ï—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        for name in names_drives:
            if current_path.replace('\\', '') in name.replace('\\', ''):
                current_path = current_path.replace('\\', '') + '\\'
                break
            else:
                current_path = current_path
                break

    elif current_path in names_drives:  # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ—Ä–Ω–µ–≤–∞—è (–Ω–∞—á–∞–ª–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–∏—Å–∫–æ–≤)
        name = folders_names.get(number)
        current_path += f'{name}'
    else:
        name = folders_names.get(number)
        current_path += f'\\{name}'

    try:
        direct = os.listdir(current_path)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ –ø—É—Ç–∏

        folders = []

        for folder in direct:
            if folder[0] != '.' and folder[0] != '$':
                folders.append(folder)

        create_bot.console += f'directory: {current_path} page: {page_number}\n'

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page

        pages = math.ceil((len(folders) / items_per_page))

        inline_folders = []
        folders_names.clear()

        i = 0

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for folder in folders[start_index:end_index]:
            if query_id == '0' or 'lnk' in folder or ' - –Ø—Ä–ª—ã–∫.lnk' in folder:
                name_folder = folder.replace('.lnk', '').replace('.exe', '')

            elif folder.lower() == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' or folder.lower() == '%1$d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                name_folder = 'Users'

            else:
                name_folder = folder

            if len(name_folder) > 20:
                name_folder = name_folder[:10] + '...' + name_folder[-10:]

            inline_folders.append(InlineKeyboardButton(f'{name_folder}', callback_data=str(i)))
            folders_names[str(i)] = folder
            i += 1

        folders_markup = InlineKeyboardMarkup(row_width=2).add(*inline_folders)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        previous_button = InlineKeyboardButton('‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='previous_page')
        next_button = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂', callback_data='next_page')

        if page == 1 and pages > 1:
            folders_markup.row(next_button)
        elif end_index >= len(folders) and pages > 1:
            folders_markup.row(previous_button)
        elif pages <= 1:
            pass
        else:
            folders_markup.row(previous_button, next_button)

        if query_id != '0':
            if current_path in names_drives:
                go_back_to_drives = InlineKeyboardButton('‚óÄ –ö –¥–∏—Å–∫–∞–º', callback_data='back_to_drives')
                folders_markup.row(go_back_to_drives)
            else:
                go_back_to_drives = InlineKeyboardButton('‚óÄ –ö –¥–∏—Å–∫–∞–º', callback_data='back_to_drives')
                go_back_explorer = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')
                folders_markup.row(go_back_explorer, go_back_to_drives)

        if query_id != '0':
            await bot.answer_callback_query(callback_query_id=query_id)

        return current_path, folders_markup  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∏ –ú–∞—Ä–∫–∞–ø—ã

    except PermissionError as e:
        create_bot.console += f'\n–û—à–∏–±–∫–∞ explorer_func: {e}\n\n'
        show_error_message(f'–û—à–∏–±–∫–∞ explorer_func: {e}')
        logger.logging_func(e)

        await bot.answer_callback_query(callback_query_id=query_id, text="‚ùó –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.", show_alert=True)
        current_path = os.path.dirname(current_path)

    except FileNotFoundError as e:
        create_bot.console += f'\n–û—à–∏–±–∫–∞ explorer_func: {e}\n\n'
        show_error_message(f'–û—à–∏–±–∫–∞ explorer_func: {e}')
        logger.logging_func(e)

        await bot.answer_callback_query(callback_query_id=query_id, text="‚ùó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        await explore_disks(True)

    except Exception as e:
        create_bot.console += f'\n–û—à–∏–±–∫–∞ explorer_func: {e}\n\n'
        show_error_message(f'–û—à–∏–±–∫–∞ explorer_func: {e}')
        logger.logging_func(e)

        await bot.answer_callback_query(callback_query_id=query_id, text="‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
        await explore_disks(True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CallBacks
# @dp.callback_query_handler()
async def handle_callback(callback_query: types.CallbackQuery):
    global current_path, page_number, pages, text_to_gpt, file_name, user_id
    user_id = create_bot.user_id

    if str(callback_query.from_user.id) == str(user_id):

        command = callback_query.data
        names_dict = {}

        def read_text_file(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()

                return lines

            except Exception as e:
                logger.logging_func(e)

        def scan_folders(root_folder):
            exe_files = {}
            for foldername, subfolders, filenames in os.walk(root_folder):
                if foldername.endswith("ahk"):
                    for filename in filenames:
                        if filename.endswith(".exe"):
                            exe_path = os.path.join(foldername, filename)
                            exe_files[filename] = exe_path
            return exe_files

        folders = os.listdir(root_folder)

        if folders:
            for foldername, subfolders, filenames in os.walk(root_folder):
                for filename in filenames:
                    if filename == "names.txt":
                        file_path = os.path.join(foldername, filename)
                        lines = read_text_file(file_path)
                        if lines:
                            for line in lines:
                                line = line.strip()
                                names_dict[line.split(':')[1]] = line.split(':')[0]

        exe_files = scan_folders(root_folder)

        if command.startswith('folder:'):
            await bot.answer_callback_query(callback_query.id)
            folder_name = command.split(':')[1]
            subfolder_path = os.path.join(root_folder, folder_name, 'ahk')
            exe_files = scan_folders(subfolder_path)

            if exe_files:
                global files
                files = []
                files.clear()
                for filename in exe_files.keys():
                    for key, val in names_dict.items():
                        if str(filename.split('.')[0]) == key:
                            files.append(InlineKeyboardButton(val, callback_data=filename))
                        elif str(filename.split('.')[0]) not in names_dict.keys():
                            if InlineKeyboardButton(filename, callback_data=filename) not in files:
                                files.append(InlineKeyboardButton(filename, callback_data=filename))

                inline_files = InlineKeyboardMarkup(row_width=2).add(*files, InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                                                                                                  callback_data=
                                                                                                  'commands'))
                await bot.edit_message_text(chat_id=user_id,
                                            message_id=callback_query.message.message_id,
                                            text=f'üìÇ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {folder_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                            reply_markup=inline_files)
            else:
                await bot.edit_message_text(chat_id=user_id,
                                            message_id=callback_query.message.message_id,
                                            text='‚úñ –í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.', reply_markup=markups.open_commands())

        if command == 'commands':
            await bot.answer_callback_query(callback_query.id)
            await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                        text='üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:', reply_markup=markups.open_commands())

        if command in names_drives:
            current_path = command
            try:
                result = await explorer_func(number='', query_id=callback_query.id)

                if result is not None:
                    folder, buttons = result
                    if pages >= 1:
                        await bot.edit_message_text(chat_id=user_id,
                                                    message_id=callback_query.message.message_id,
                                                    text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞:\n{page_number}'
                                                         f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {folder}', reply_markup=buttons)

                    else:
                        go_back_explorer = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')
                        folders_markup = InlineKeyboardMarkup(row_width=1).add(go_back_explorer)
                        await bot.edit_message_text(chat_id=user_id,
                                                    message_id=callback_query.message.message_id,
                                                    text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}\n'
                                                         f'‚úñ –í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.', reply_markup=folders_markup)
                else:
                    pass

            except Exception:
                pass

        if command == 'next_page':
            page_number = page_number + 1

            result = await explorer_func(number='', page=page_number, query_id=callback_query.id)

            if result is not None:
                folder, buttons = result
                await bot.edit_message_text(chat_id=user_id,
                                            message_id=callback_query.message.message_id,
                                            text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                 f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}', reply_markup=buttons)

        if command == 'previous_page':
            page_number = page_number - 1

            result = await explorer_func(number='', page=page_number, query_id=callback_query.id)

            if result is not None:
                folder, buttons = result
                await bot.edit_message_text(chat_id=user_id,
                                            message_id=callback_query.message.message_id,
                                            text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                 f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}', reply_markup=buttons)

        if command in folders_names.keys():
            if os.path.isdir(current_path + f'\\{folders_names.get(command)}'):
                try:
                    create_bot.console += f'folder: {folders_names.get(command)}\n'

                    result = await explorer_func(number=command, query_id=callback_query.id)

                    if result is not None:
                        folder, buttons = result
                        if pages >= 1:
                            await bot.edit_message_text(chat_id=user_id,
                                                        message_id=callback_query.message.message_id,
                                                        text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                             f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}',
                                                        reply_markup=buttons)

                        else:
                            go_back_explorer = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')
                            folders_markup = InlineKeyboardMarkup(row_width=1).add(go_back_explorer)
                            await bot.edit_message_text(chat_id=user_id,
                                                        message_id=callback_query.message.message_id,
                                                        text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}\n'
                                                             f'‚úñ –í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.',
                                                        reply_markup=folders_markup)

                except Exception as e:
                    if current_path not in names_drives:
                        index = current_path.rfind('\\')
                        if index != -1:
                            current_path = current_path[:index]
                            result = await explorer_func(number='', query_id=callback_query.id)

                            if result is not None:
                                folder, buttons = result
                                await bot.edit_message_text(chat_id=user_id,
                                                            message_id=callback_query.message.message_id,
                                                            text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nü´°–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É.\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞:'
                                                                 f' {page_number} –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}',
                                                            reply_markup=buttons)

                                create_bot.console += f'\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}\n\n'
                                show_error_message(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}')
                                logger.logging_func(e)

                            else:
                                pass

            else:
                file_name = folders_names.get(command)
                if current_path == os.path.dirname(os.path.abspath(sys.argv[0])) + '\\lnk':

                    create_bot.console += f'subprocess: {current_path}\\{file_name}\n'

                    subprocess.run(['start', '', current_path + f'\\{file_name}'], shell=True)
                    await bot.answer_callback_query(callback_query_id=callback_query.id,
                                                    text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

                else:
                    current_path = current_path + '\\' + file_name
                    if os.path.exists(current_path):
                        create_bot.edit_msg = await bot.edit_message_text(chat_id=user_id,
                                                                          message_id=callback_query.message.message_id,
                                                                          text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{current_path}'
                                                                               + '\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                                                          reply_markup=markups.script_file_markup)
                    else:
                        await bot.answer_callback_query(callback_query_id=callback_query.id,
                                                        text="‚ùó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                        await explore_disks(True)

        if command == 'run':
            create_bot.console += f'subprocess: {current_path}\n'

            subprocess.run(['start', '', current_path], shell=True)

            await bot.answer_callback_query(callback_query_id=callback_query.id,
                                            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)

        if command == 'download':
            current_path = os.path.dirname(current_path)
            result = await explorer_func(number='', query_id=callback_query.id)
            if result is not None:
                folder, buttons = result
                try:
                    create_bot.edit_msg = await bot.edit_message_text(chat_id=user_id,
                                                                      message_id=callback_query.message.message_id,
                                                                      text='‚è≥ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞.')

                    file_path_name = ''

                    for name in names_drives:
                        if current_path in name:
                            file_path_name = current_path + f'{file_name}'
                            break
                        else:
                            file_path_name = current_path + f'\\{file_name}'
                            break

                    with open(file_path_name, 'rb') as file:
                        create_bot.console += f'upload file: {file_name}\n'
                        await bot.send_document(chat_id=user_id, document=file)
                        create_bot.edit_msg = await bot.send_message(chat_id=user_id,
                                                                     text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                                          f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}',
                                                                     reply_markup=buttons)

                except Exception as e:
                    await bot.edit_message_text(chat_id=user_id,
                                                message_id=create_bot.edit_msg.message_id,
                                                text='ü´°–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.'
                                                     ' –ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π—Ç–µ –≤ –ö–æ–Ω—Å–æ–ª–∏.')
                    create_bot.edit_msg = await bot.send_message(chat_id=user_id,
                                                                 text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                                      f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}',
                                                                 reply_markup=buttons)

                    create_bot.console += f'\n–û—à–∏–±–∫–∞ handle_callback (–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª): {e}\n\n'
                    show_error_message(f'–û—à–∏–±–∫–∞ handle_callback (–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª): {e}')

            else:
                pass

        if command == 'delete':
            create_bot.console += f'delete: {current_path}\n'

            os.remove(current_path)

            await bot.answer_callback_query(callback_query_id=callback_query.id,
                                            text="‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω!", show_alert=False)


        if command == 'back_to_drives' or command == 'back_explorer':
            try:
                if command == 'back_explorer':
                    current_path = os.path.dirname(current_path)
                    result = await explorer_func(number='', query_id=callback_query.id)

                    if result is not None:
                        folder, buttons = result
                        await bot.edit_message_text(chat_id=user_id,
                                                    message_id=callback_query.message.message_id,
                                                    text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                         f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}',
                                                    reply_markup=buttons)

                    else:
                        pass

                else:
                    await explore_disks(True)

            except Exception as e:
                create_bot.console += f'\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã—à–µ: {e}\n\n'
                show_error_message(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã—à–µ: {e}')
                logger.logging_func(e)
                await explore_disks(True)

        if command == 'open_lnk':
            await bot.answer_callback_query(callback_query.id)
            lnk_path = os.path.dirname(os.path.abspath(sys.argv[0])) + '\\lnk'
            os.system(f"explorer.exe {lnk_path}")

        if command == 'bot_path':
            current_path = os.path.dirname(os.path.abspath(sys.argv[0]))
            result = await explorer_func(number='', query_id=callback_query.id)

            if result is not None:
                folder, buttons = result
                await bot.edit_message_text(chat_id=user_id,
                                            message_id=callback_query.message.message_id,
                                            text=f'üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}'
                                                 f' –∏–∑ {pages}\n‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{folder}', reply_markup=buttons)

        if command == 'log':
            await bot.answer_callback_query(callback_query.id)
            await bot.delete_message(chat_id=user_id, message_id=callback_query.message.message_id)
            await bot.send_message(chat_id=user_id, text=f'‚è≥ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞.')
            create_bot.console += f'download log-file\n'
            with open('logs_from_bot.log', 'rb') as log_file:
                await bot.send_document(chat_id=user_id, document=log_file)

            await description()

        if command == 'start_voice_jarvis':
            await bot.answer_callback_query(callback_query.id)
            create_bot.edit_msg = await bot.send_message(chat_id=user_id, text='üñ• –ó–∞–ø—É—Å–∫–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ Jarvis...')

            try:
                subprocess.Popen('start-voice-jarvis.exe')
                await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                            text='‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π Jarvis –∑–∞–ø—É—â–µ–Ω.')

            except Exception:
                await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                            text='‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ Jarvis. –£–±–µ–¥–∏—Ç–µ—Å—å,'
                                                 ' —á—Ç–æ –≤ –ø–∞–ø–∫–µ –±–æ—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª start-voice-jarvis.exe.')

        if command == 'off':
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(chat_id=user_id, text='üì¥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ...')
            subprocess.Popen('off.exe')

        if command == 'reboot':
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(chat_id=user_id, text='‚ôª –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
            subprocess.Popen('reboot.exe')

        if command == 'RU-ru' or command == 'UK-uk' or command == 'EN-en':
            await bot.answer_callback_query(callback_query_id=callback_query.id)
            await recognition(command)

        if command == 'close_dialog':
            try:
                await bot.answer_callback_query(callback_query_id=callback_query.id)
                await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                            text=create_bot.edit_msg.text, reply_markup=None)
                text_to_gpt = ''
                await bot.send_message(chat_id=user_id, text='‚úÖ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥.')
            except Exception:
                pass

        def what_speaker(cmd):
            name_speaker = create_bot.speaker[int(cmd.split('-')[1])]

            if name_speaker == 'aidar':
                return '–ê–π–¥–∞—Ä'

            elif name_speaker == 'baya':
                return '–ë–∞–π—è'

            elif name_speaker == 'kseniya':
                return '–ö—Å–µ–Ω–∏—è 1'

            elif name_speaker == 'xenia':
                return '–ö—Å–µ–Ω–∏—è 2'

            else:
                return '–ï–≤–≥–µ–Ω–∏–π'

        if command.split('-')[0] == 'voice':
            await bot.answer_callback_query(callback_query_id=callback_query.id)
            await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                        text=f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\nüó£ –ì–æ–ª–æ—Å: {what_speaker(command)}.")

            try:
                await bot.send_voice(chat_id=user_id,
                                     voice=tts.va_speak(what=create_bot.text_to_speech,
                                                        voice=True, speaker=create_bot.speaker[int(command.split('-')[1])]))

                os.remove('audio.mp3')
            except Exception as e:
                logger.logging_func(e)

        if command.split('-')[0] == 'audio':
            await bot.answer_callback_query(callback_query_id=callback_query.id)
            await bot.edit_message_text(chat_id=user_id, message_id=create_bot.edit_msg.message_id,
                                        text=f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\nüó£ –ì–æ–ª–æ—Å: {what_speaker(command)}.")

            tts.va_speak(what=create_bot.text_to_speech, voice=False,
                         speaker=create_bot.speaker[int(command.split('-')[1])])

        async def keyboard_press(btn):
            if command == btn.callback_data:
                await bot.answer_callback_query(callback_query.id)
                create_bot.console += f'keyboard press: {command}\n'
                keyboard.press_and_release(command)

        for btn1, btn2 in zip(markups.keys, markups.f):
            await keyboard_press(btn1)
            await keyboard_press(btn2)

        for key, val in exe_files.items():
            if command == key:
                await bot.answer_callback_query(callback_query_id=callback_query.id,
                                                text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=False)
                if command == 'screenshot.exe':
                    create_bot.console += ('subprocess: {}\\{}\n'.format(val.split("\\")[-3], command))

                    create_bot.edit_msg = await bot.edit_message_text(chat_id=user_id,
                                                                      message_id=create_bot.edit_msg.message_id,
                                                                      text='‚è≥ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.')

                    path = tempfile.gettempdir() + 'screenshot.png'
                    screenshot = ImageGrab.grab()
                    screenshot.save(path, 'PNG')
                    subprocess.Popen(val)

                    await bot.send_document(chat_id=user_id, document=open(path, 'rb'))
                    await bot.delete_message(chat_id=user_id, message_id=create_bot.edit_msg.message_id)
                    await bot.send_message(chat_id=user_id, text='üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:',
                                           reply_markup=markups.open_commands())

                else:
                    create_bot.console += 'subprocess: {}\\{}\n'.format(val.split("\\")[-3], command)
                    subprocess.Popen(val)

    else:
        await bot.send_message(chat_id=user_id, text="‚ùó –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")


def callbacks_messages_handlers(dp: Dispatcher):
    try:
        dp.register_message_handler(messages)
        dp.register_callback_query_handler(handle_callback)
    except:
        pass

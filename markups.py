import configparser

import psutil
import requests
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import os

from bs4 import BeautifulSoup

import create_bot
import logger

commands_btns = []
commands = {}

config = configparser.ConfigParser()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞


def open_commands() -> InlineKeyboardMarkup:
    def get_folder_names(directory: str) -> list:
        try:
            folders = [folder for folder in os.listdir(directory) if os.path.isdir(os.path.join(directory, folder))]
            return folders

        except Exception as e:
            logger.py_logger.error(f"{e}\n\n")

    config.read('config.ini')
    folder_path = config.get('tg-bot', 'commands_folder')
    folders = get_folder_names(folder_path)

    if folders:

        folder_btns = [InlineKeyboardButton(f'{folder}', callback_data=f'folder:{folder}') for folder in folders]

    else:
        folder_btns = []

    commands_btns.clear()

    for btn in folder_btns:
        commands_btns.append(btn)


    inline_folders = InlineKeyboardMarkup(row_width=2).add(*commands_btns)

    return inline_folders


def open_folder(folder_name: str) -> InlineKeyboardMarkup:
    def get_exe_files(directory):
        try:
            exe_files = [file for file in os.listdir(directory) if file.endswith('.exe')]
            return exe_files

        except Exception as e:
            logger.py_logger.error(f"{e}\n\n")

    config.read('config.ini')
    folder_path = config.get('tg-bot', 'commands_folder')

    folder_path = os.path.join(folder_path, folder_name)
    subfolder_path = os.path.join(folder_path, 'ahk')
    exe_files = get_exe_files(subfolder_path)

    if exe_files:
        exe_btns = [InlineKeyboardButton(file, callback_data=f'file:{file}') for file in exe_files]

    else:
        exe_btns = []

    commands_btns.clear()

    for btn in exe_btns:
        commands_btns.append(btn)

    inline_files = InlineKeyboardMarkup(row_width=2).add(*commands_btns)

    return inline_files


main_btns = [KeyboardButton('ü§ñ –ö–æ–º–∞–Ω–¥—ã Jarvis'),
             KeyboardButton('üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä'),
             KeyboardButton('üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º')]

main_inline = ReplyKeyboardMarkup(resize_keyboard=True).add(*main_btns)


pc_btns = [InlineKeyboardButton('üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∫', callback_data='pc_control'),
           InlineKeyboardButton('üíø –ü—Ä–æ–≥—Ä–∞–º–º—ã', callback_data='programs'),
           InlineKeyboardButton('üìÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫', callback_data='explorer'),
           InlineKeyboardButton('üíª –ö–æ–º–∞–Ω–¥—ã Windows', callback_data='commands_windows'),
           InlineKeyboardButton('üíΩ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á', callback_data='tasks'),
           InlineKeyboardButton('‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', callback_data='keyboard'),
           InlineKeyboardButton('üêÅ –ú—ã—à—å', callback_data='mouse'),]

pc_markup = InlineKeyboardMarkup(row_width=2).add(*pc_btns)


update_pc_control_btn = InlineKeyboardButton('‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å', callback_data='pc_control')
back_to_pc_markup_btn = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_pc')

back_to_pc_markup = InlineKeyboardMarkup(row_width=1).add(update_pc_control_btn, back_to_pc_markup_btn)


f = [InlineKeyboardButton('‚â° F1 ‚â°', callback_data='f1'), InlineKeyboardButton('‚â° F2 ‚â°', callback_data='f2'),
     InlineKeyboardButton('‚â° F3 ‚â°', callback_data='f3'), InlineKeyboardButton('‚â° F4 ‚â°', callback_data='f4'),
     InlineKeyboardButton('‚â° F5 ‚â°', callback_data='f5'), InlineKeyboardButton('‚â° F6 ‚â°', callback_data='f6'),
     InlineKeyboardButton('‚â° F7 ‚â°', callback_data='f7'), InlineKeyboardButton('‚â° F8 ‚â°', callback_data='f8'),
     InlineKeyboardButton('‚â° F9 ‚â°', callback_data='f9'), InlineKeyboardButton('‚â° F10 ‚â°', callback_data='f10'),
     InlineKeyboardButton('‚â° F11 ‚â°', callback_data='f11'), InlineKeyboardButton('‚â° F12 ‚â°', callback_data='f12')]

keys = [InlineKeyboardButton('Space', callback_data='space'),
        InlineKeyboardButton('Enter', callback_data='enter'),
        InlineKeyboardButton('Esc', callback_data='esc'),
        InlineKeyboardButton('Windows', callback_data='win'),
        InlineKeyboardButton('Backspace', callback_data='backspace'),
        InlineKeyboardButton('Shift', callback_data='shift'),
        InlineKeyboardButton('Ctrl', callback_data='ctrl'),
        InlineKeyboardButton('Alt', callback_data='alt'),
        InlineKeyboardButton('Left', callback_data='left'),
        InlineKeyboardButton('Right', callback_data='right'),
        InlineKeyboardButton('Up', callback_data='up'),
        InlineKeyboardButton('Down', callback_data='down')]

keyboard_inline = InlineKeyboardMarkup(row_width=4).add(*f, *keys, back_to_pc_markup_btn)


mouse_btns = [
    InlineKeyboardButton('–≤–≤–µ—Ä—Ö 10', callback_data='up_10'),
    InlineKeyboardButton('–≤–Ω–∏–∑ 10', callback_data='down_10'),
    InlineKeyboardButton('–≤–ª–µ–≤–æ 10', callback_data='left_10'),
    InlineKeyboardButton('–≤–ø—Ä–∞–≤–æ 10', callback_data='right_10'),

    InlineKeyboardButton('–≤–≤–µ—Ä—Ö 100', callback_data='up_100'),
    InlineKeyboardButton('–≤–Ω–∏–∑ 100', callback_data='down_100'),
    InlineKeyboardButton('–≤–ª–µ–≤–æ 100', callback_data='left_100'),
    InlineKeyboardButton('–≤–ø—Ä–∞–≤–æ 100', callback_data='right_100'),

    InlineKeyboardButton('–õ–ö–ú', callback_data='left_0'),
    InlineKeyboardButton('–ü–ö–ú', callback_data='right_0'),
]

Mouse_markup = InlineKeyboardMarkup(row_width=2).add(*mouse_btns, back_to_pc_markup_btn)


service_btns = [InlineKeyboardButton('üñ• –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ Jarvis', callback_data='start_voice_jarvis'),
                InlineKeyboardButton('üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞', callback_data='off'),
                InlineKeyboardButton('‚ôª –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞', callback_data='reboot'),
                InlineKeyboardButton('üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º', callback_data='bot_path'),
                InlineKeyboardButton('‚¨á –°–∫–∞—á–∞—Ç—å –ª–æ–≥', callback_data='log')]

service_markup = InlineKeyboardMarkup(row_width=1).add(*service_btns)


voice_speakers = [InlineKeyboardButton('üë®‚Äçü¶± ‚Äç–ê–π–¥–∞—Ä', callback_data='voice-0'),
                  InlineKeyboardButton('üßë –ë–∞–π—è', callback_data='voice-1'),
                  InlineKeyboardButton('üë© –ö—Å–µ–Ω–∏—è 1', callback_data='voice-2'),
                  InlineKeyboardButton('üë©‚Äçü¶∞ –ö—Å–µ–Ω–∏—è 2', callback_data='voice-3'),
                  InlineKeyboardButton('üë®‚Äçü¶∞ –ï–≤–≥–µ–Ω–∏–π', callback_data='voice-4')]

voice_markup = InlineKeyboardMarkup(row_width=1).add(*voice_speakers)

audio_speakers = [InlineKeyboardButton('üë®‚Äçü¶± ‚Äç–ê–π–¥–∞—Ä', callback_data='audio-0'),
                  InlineKeyboardButton('üßë –ë–∞–π—è', callback_data='audio-1'),
                  InlineKeyboardButton('üë© –ö—Å–µ–Ω–∏—è 1', callback_data='audio-2'),
                  InlineKeyboardButton('üë©‚Äçü¶∞ –ö—Å–µ–Ω–∏—è 2', callback_data='audio-3'),
                  InlineKeyboardButton('üë®‚Äçü¶∞ –ï–≤–≥–µ–Ω–∏–π', callback_data='audio-4')]

audio_markup = InlineKeyboardMarkup(row_width=1).add(*audio_speakers)


languages = [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='RU-ru'),
             InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', callback_data='UK-uk'),
             InlineKeyboardButton('üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='EN-en')]

langs_markup = InlineKeyboardMarkup(row_width=1).add(*languages)


script_file_btns = [InlineKeyboardButton('üñ• –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data='run'),
                    InlineKeyboardButton('üì≤ –°–∫–∞—á–∞—Ç—å', callback_data='download'),
                    InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data='delete'),
                    InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')]

script_file_markup = InlineKeyboardMarkup(row_width=1).add(*script_file_btns)


open_lnk_btn = InlineKeyboardButton('üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É', callback_data='open_lnk')

open_lnk_markup = InlineKeyboardMarkup(row_width=1).add(open_lnk_btn, back_to_pc_markup_btn)


close_dialog_btn = InlineKeyboardButton('‚úñ –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥', callback_data='close_dialog')

gpt_markup = InlineKeyboardMarkup(row_width=1).add(close_dialog_btn)


open_link_btn = InlineKeyboardButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É', callback_data='open_link')

open_link_markup = InlineKeyboardMarkup(row_width=1).add(open_link_btn)


commands_windows_btns1 = [
    InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å –ø–∫', callback_data='shutdown_pc'),
    InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è', callback_data='cancel_shutdown_pc.exe'),
    InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∫', callback_data='block_pc.exe'),
    InlineKeyboardButton('–°–ø—è—â–∏–π —Ä–µ–∂–∏–º', callback_data='sleep_pc.exe'),
    InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', callback_data='reboot_pc.exe'),
    InlineKeyboardButton('–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', callback_data='clipboard.exe'),
    InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='empty_trash.exe'),
    InlineKeyboardButton('–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á', callback_data='task_manager.exe'),
    InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='open_settings.exe'),
    InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='close_settings.exe'),
    InlineKeyboardButton('–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞', callback_data='roll_up_windows.exe'),
    InlineKeyboardButton('–°–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ', callback_data='minimize_current_window.exe'),
    InlineKeyboardButton('–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω', callback_data='maximize_current_window.exe'),
    InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É', callback_data='change_language.exe'),
    InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', callback_data='screenshot.exe'),
    InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏', callback_data='open_downloads.exe'),
]

commands_windows_btns2 = [
    InlineKeyboardButton('–ó–≤—É–∫', callback_data='mute_volume.exe'),
    InlineKeyboardButton('–ó–≤—É–∫ –Ω–∞ –º–∏–Ω–∏–º—É–º', callback_data='min_volume.exe'),
    InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Ç–∏—à–µ', callback_data='sound_down.exe'),
    InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –≥—Ä–æ–º—á–µ', callback_data='sound_up.exe'),
    InlineKeyboardButton('–ì—Ä–æ–º–∫–æ—Å—Ç—å 20', callback_data='set_sound_20.exe'),
    InlineKeyboardButton('–ì—Ä–æ–º–∫–æ—Å—Ç—å 50', callback_data='set_sound_50.exe'),
    InlineKeyboardButton('–ì—Ä–æ–º–∫–æ—Å—Ç—å 80', callback_data='set_sound_80.exe'),
    InlineKeyboardButton('–ì—Ä–æ–º–∫–æ—Å—Ç—å 100', callback_data='set_sound_100.exe'),
    InlineKeyboardButton('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏–∫–∏', callback_data='switch_to_speakers.exe'),
    InlineKeyboardButton('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏', callback_data='switch_to_headphones.exe'),
]

go_next = InlineKeyboardButton('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='next')
go_back = InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='back')


def commands_windows(page: int) -> InlineKeyboardMarkup:
    commands_windows_markup = InlineKeyboardMarkup(row_width=2)
    if page == 0:
        commands_windows_markup.add(*commands_windows_btns1, go_next, back_to_pc_markup_btn)
    else:
        commands_windows_markup.add(*commands_windows_btns2, go_back, back_to_pc_markup_btn)

    return commands_windows_markup


def get_running_applications() -> list:
    running_apps = []

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    for proc in psutil.process_iter(['name', 'username']):
        try:
            proc_info = proc.as_dict(attrs=['name', 'username', 'exe'])
            proc_name = proc_info['name']
            proc_username = proc_info['username']
            proc_exe = proc_info['exe']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if proc_username and proc_exe and proc_name not in running_apps:
                running_apps.append(proc_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –º–∞—Å—Å–∏–≤ running_apps
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    return running_apps


def tasks() -> list:
    running_apps = get_running_applications()

    running_apps_btns = [InlineKeyboardButton(app_name, callback_data=app_name) for app_name in running_apps]
    running_apps_markup = InlineKeyboardMarkup(row_width=2).add(*running_apps_btns, back_to_pc_markup_btn)

    return [running_apps_btns, running_apps_markup]


def searching_films(page=1) -> tuple:
    buttons = []

    create_bot.page_films = page

    # URL-–∞–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    url = f'https://hd.erfilm.cfd/page/{page}/'

    response = requests.get(url)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
    soup = BeautifulSoup(response.content, 'html.parser')

    # –ù–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º "th-item"
    th_items = soup.find_all(class_='th-item')

    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –±–ª–æ–∫
    for th_item in th_items:
        th_in = th_item.find(class_='th-in')
        link = th_in['href']
        title = th_in.find(class_='th-title').get_text(strip=True)

        if len(link.replace('https://hd.erfilm.cfd/', '')) < 66:
            buttons.append(InlineKeyboardButton(title, callback_data=link.replace('https://hd.erfilm.cfd/', '')))


    films_markup = InlineKeyboardMarkup(row_width=2)
    films_markup.add(*buttons)

    # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥"
    if page == 1:
        films_markup.add(InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', callback_data='next_film'))
    else:
        films_markup.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='prev_film'),
                         InlineKeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥', callback_data='next_film'))

    return films_markup, page
